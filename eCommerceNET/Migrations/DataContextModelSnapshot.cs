// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerceNET.Helpers;

namespace eCommerceNET.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eCommerceNET.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new { Id = 1, UserId = 1 }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("SizeId");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId")
                        .IsUnique();

                    b.ToTable("CartItems");

                    b.HasData(
                        new { Id = 1, CartId = 1, ProductId = 4, Quantity = 1, SizeId = 10 },
                        new { Id = 2, CartId = 1, ProductId = 6, Quantity = 2, SizeId = 23 }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentUrls");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("ProductId");

                    b.Property<string>("Rating");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserId1");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Comments");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "High quality sneakers. Satisfied.", ProductId = 1, Rating = "Good", UserId = 1 },
                        new { Id = 2, Date = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "High quality sneakers. Satisfied.", ProductId = 2, Rating = "Good", UserId = 1 },
                        new { Id = 3, Date = new DateTime(2019, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Good sneakers for designated price.", ProductId = 2, Rating = "Neytral", UserId = 1 },
                        new { Id = 4, Date = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "High quality sneakers. Satisfied.", ProductId = 4, Rating = "Good", UserId = 1 },
                        new { Id = 5, Date = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "High quality sneakers. Satisfied.", ProductId = 5, Rating = "Good", UserId = 1 },
                        new { Id = 6, Date = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Good sneakers for designated price.", ProductId = 5, Rating = "Neutral", UserId = 1 },
                        new { Id = 7, Date = new DateTime(2019, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "New comment", ProductId = 6, Rating = "Good", UserId = 1 },
                        new { Id = 8, Date = new DateTime(2019, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "zsdc", ProductId = 6, Rating = "Good", UserId = 1 },
                        new { Id = 9, Date = new DateTime(2019, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "d", ProductId = 6, Rating = "Good", UserId = 1 }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.DeliveryInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine");

                    b.Property<string>("City");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Province");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("DeliveryInfos");

                    b.HasData(
                        new { Id = 1, AddressLine = "155 Forest Creeck", City = "Oakville", PostalCode = "N5F 2C1", Province = "Alberta", UserName = "test" }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("DeliveryInfoId");

                    b.Property<bool>("IsPaid");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), DeliveryInfoId = 1, IsPaid = true, UserId = 1 }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("SizeId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId")
                        .IsUnique();

                    b.ToTable("OrderItems");

                    b.HasData(
                        new { Id = 1, OrderId = 1, ProductId = 4, Quantity = 1, SizeId = 10 },
                        new { Id = 2, OrderId = 1, ProductId = 6, Quantity = 2, SizeId = 23 }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Tag");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new { Id = 1, Brand = "Nike", ImagePath = "uploads/0.jpg,uploads/1.jpg,uploads/2.jpg,uploads/3.jpg", Name = "AIR FOAMPOSITE ONE 'RUST PINK'", Price = 225m, Tag = "new" },
                        new { Id = 2, Brand = "Nike", ImagePath = "uploads/4.jpg,uploads/5.jpg,uploads/6.jpg,uploads/7.jpg", Name = "AIR FORCE 1 MID LV8 (GS)", Price = 150m, Tag = "new" },
                        new { Id = 3, Brand = "Nike", ImagePath = "uploads/8.jpg,uploads/9.jpg,uploads/10.jpg,uploads/11.jpg", Name = "AIR HUARACHE RUN 'PURPLE PUNCH'", Price = 125m, Tag = "new" },
                        new { Id = 4, Brand = "Nike", ImagePath = "uploads/12.jpg,uploads/13.jpg,uploads/14.jpg,uploads/15.jpg", Name = "AIR JORDAN 1 MID 'TOP 3'", Price = 200m, Tag = "new" },
                        new { Id = 5, Brand = "Nike", ImagePath = "uploads/16.jpg,uploads/17.jpg,uploads/18.jpg,uploads/19.jpg", Name = "AIR JORDAN 11 RETRO 'CONCORD'", Price = 315m, Tag = "new" },
                        new { Id = 6, Brand = "Nike", ImagePath = "uploads/20.jpg,uploads/21.jpg,uploads/22.jpg,uploads/23.jpg", Name = "AIR VAPORMAX FK 'OFF-WHITE'", Price = 780m, Tag = "new" }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAvailable");

                    b.Property<int>("ProductId");

                    b.Property<string>("Size");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSizes");

                    b.HasData(
                        new { Id = 1, IsAvailable = true, ProductId = 1, Size = "6.5" },
                        new { Id = 2, IsAvailable = true, ProductId = 1, Size = "7.0" },
                        new { Id = 3, IsAvailable = false, ProductId = 1, Size = "7.5" },
                        new { Id = 4, IsAvailable = true, ProductId = 1, Size = "8.0" },
                        new { Id = 5, IsAvailable = false, ProductId = 2, Size = "6.5" },
                        new { Id = 6, IsAvailable = true, ProductId = 2, Size = "7.0" },
                        new { Id = 7, IsAvailable = true, ProductId = 2, Size = "7.5" },
                        new { Id = 8, IsAvailable = false, ProductId = 2, Size = "8.0" },
                        new { Id = 9, IsAvailable = false, ProductId = 3, Size = "7.5" },
                        new { Id = 10, IsAvailable = true, ProductId = 3, Size = "8.0" },
                        new { Id = 11, IsAvailable = false, ProductId = 3, Size = "8.5" },
                        new { Id = 12, IsAvailable = false, ProductId = 3, Size = "9.0" },
                        new { Id = 13, IsAvailable = true, ProductId = 4, Size = "7.5" },
                        new { Id = 14, IsAvailable = true, ProductId = 4, Size = "8.0" },
                        new { Id = 15, IsAvailable = false, ProductId = 4, Size = "8.5" },
                        new { Id = 16, IsAvailable = true, ProductId = 4, Size = "9.0" },
                        new { Id = 17, IsAvailable = true, ProductId = 5, Size = "7.0" },
                        new { Id = 18, IsAvailable = true, ProductId = 5, Size = "8.0" },
                        new { Id = 19, IsAvailable = false, ProductId = 5, Size = "9.0" },
                        new { Id = 20, IsAvailable = true, ProductId = 5, Size = "10.0" },
                        new { Id = 21, IsAvailable = false, ProductId = 6, Size = "7.0" },
                        new { Id = 22, IsAvailable = true, ProductId = 6, Size = "8.0" },
                        new { Id = 23, IsAvailable = true, ProductId = 6, Size = "9.0" },
                        new { Id = 24, IsAvailable = true, ProductId = 6, Size = "10.0" }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeliveryInfoId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryInfoId")
                        .IsUnique()
                        .HasFilter("[DeliveryInfoId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, DeliveryInfoId = 1, Email = "test@example.com", Name = "test", PasswordHash = new byte[] { 84, 119, 159, 0, 148, 82, 236, 132, 48, 46, 83, 109, 187, 211, 133, 165, 103, 233, 113, 72, 127, 118, 246, 130, 4, 212, 96, 2, 121, 32, 161, 137, 71, 73, 43, 3, 237, 202, 181, 229, 98, 124, 42, 40, 56, 98, 210, 239, 92, 248, 242, 217, 225, 54, 243, 42, 26, 230, 32, 188, 51, 103, 101, 89 }, PasswordSalt = new byte[] { 23, 178, 171, 85, 103, 152, 177, 239, 31, 154, 19, 55, 236, 114, 104, 230, 48, 62, 151, 102, 103, 80, 49, 251, 110, 60, 51, 111, 41, 145, 119, 80, 118, 32, 83, 43, 197, 193, 219, 224, 83, 156, 159, 4, 71, 76, 203, 69, 231, 185, 214, 156, 105, 219, 63, 90, 176, 119, 188, 104, 166, 161, 239, 194, 215, 165, 255, 101, 36, 166, 58, 151, 174, 159, 43, 91, 41, 15, 18, 78, 188, 213, 85, 80, 61, 11, 216, 229, 73, 10, 185, 186, 148, 216, 105, 176, 24, 48, 20, 214, 38, 80, 74, 9, 113, 223, 240, 145, 127, 208, 40, 106, 246, 144, 141, 169, 237, 46, 141, 185, 98, 157, 196, 55, 143, 86, 238, 176 } }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.Cart", b =>
                {
                    b.HasOne("eCommerceNET.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("eCommerceNET.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eCommerceNET.Entities.CartItem", b =>
                {
                    b.HasOne("eCommerceNET.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.ProductSize", "Size")
                        .WithOne()
                        .HasForeignKey("eCommerceNET.Entities.CartItem", "SizeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("eCommerceNET.Entities.Comment", b =>
                {
                    b.HasOne("eCommerceNET.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("eCommerceNET.Entities.Order", b =>
                {
                    b.HasOne("eCommerceNET.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eCommerceNET.Entities.OrderItem", b =>
                {
                    b.HasOne("eCommerceNET.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.ProductSize", "Size")
                        .WithOne()
                        .HasForeignKey("eCommerceNET.Entities.OrderItem", "SizeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("eCommerceNET.Entities.ProductSize", b =>
                {
                    b.HasOne("eCommerceNET.Entities.Product", "Product")
                        .WithMany("Sizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eCommerceNET.Entities.User", b =>
                {
                    b.HasOne("eCommerceNET.Entities.DeliveryInfo", "DeliveryInfo")
                        .WithOne()
                        .HasForeignKey("eCommerceNET.Entities.User", "DeliveryInfoId");
                });
#pragma warning restore 612, 618
        }
    }
}
