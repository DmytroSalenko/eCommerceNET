// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerceNET.Helpers;

namespace eCommerceNET.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190415204736_SeedDatabase")]
    partial class SeedDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eCommerceNET.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new { Id = 1, UserId = 1 }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("SizeId");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId")
                        .IsUnique();

                    b.ToTable("CartItems");

                    b.HasData(
                        new { Id = 1, CartId = 1, ProductId = 4, Quantity = 1, SizeId = 10 },
                        new { Id = 2, CartId = 1, ProductId = 6, Quantity = 2, SizeId = 23 }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentUrls");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("ProductId");

                    b.Property<string>("Rating");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserId1");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Comments");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "High quality sneakers. Satisfied.", ProductId = 1, Rating = "Good", UserId = 1 },
                        new { Id = 2, Date = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "High quality sneakers. Satisfied.", ProductId = 2, Rating = "Good", UserId = 1 },
                        new { Id = 3, Date = new DateTime(2019, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Good sneakers for designated price.", ProductId = 2, Rating = "Neytral", UserId = 1 },
                        new { Id = 4, Date = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "High quality sneakers. Satisfied.", ProductId = 4, Rating = "Good", UserId = 1 },
                        new { Id = 5, Date = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "High quality sneakers. Satisfied.", ProductId = 5, Rating = "Good", UserId = 1 },
                        new { Id = 6, Date = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Good sneakers for designated price.", ProductId = 5, Rating = "Neutral", UserId = 1 },
                        new { Id = 7, Date = new DateTime(2019, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "New comment", ProductId = 6, Rating = "Good", UserId = 1 },
                        new { Id = 8, Date = new DateTime(2019, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "zsdc", ProductId = 6, Rating = "Good", UserId = 1 },
                        new { Id = 9, Date = new DateTime(2019, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "d", ProductId = 6, Rating = "Good", UserId = 1 }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.DeliveryInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine");

                    b.Property<string>("City");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Province");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("DeliveryInfos");

                    b.HasData(
                        new { Id = 1, AddressLine = "155 Forest Creeck", City = "Oakville", PostalCode = "N5F 2C1", Province = "Alberta", UserName = "test" }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("DeliveryInfoId");

                    b.Property<bool>("IsPaid");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), DeliveryInfoId = 1, IsPaid = true, UserId = 1 }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("SizeId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId")
                        .IsUnique();

                    b.ToTable("OrderItems");

                    b.HasData(
                        new { Id = 1, OrderId = 1, ProductId = 4, Quantity = 1, SizeId = 10 },
                        new { Id = 2, OrderId = 1, ProductId = 6, Quantity = 2, SizeId = 23 }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Tag");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new { Id = 1, Brand = "Nike", ImagePath = "uploads/0.jpg, uploads/1.jpg, uploads/2.jpg, uploads/3.jpg", Name = "AIR FOAMPOSITE ONE 'RUST PINK'", Price = 225m, Tag = "new" },
                        new { Id = 2, Brand = "Nike", ImagePath = "uploads/4.jpg, uploads/5.jpg, uploads/6.jpg, uploads/7.jpg", Name = "AIR FORCE 1 MID LV8 (GS)", Price = 150m, Tag = "new" },
                        new { Id = 3, Brand = "Nike", ImagePath = "uploads/8.jpg, uploads/9.jpg, uploads/10.jpg, uploads/11.jpg", Name = "AIR HUARACHE RUN 'PURPLE PUNCH'", Price = 125m, Tag = "new" },
                        new { Id = 4, Brand = "Nike", ImagePath = "uploads/12.jpg, uploads/13.jpg, uploads/14.jpg, uploads/15.jpg", Name = "AIR JORDAN 1 MID 'TOP 3'", Price = 200m, Tag = "new" },
                        new { Id = 5, Brand = "Nike", ImagePath = "uploads/16.jpg, uploads/17.jpg, uploads/18.jpg, uploads/19.jpg", Name = "AIR JORDAN 11 RETRO 'CONCORD'", Price = 315m, Tag = "new" },
                        new { Id = 6, Brand = "Nike", ImagePath = "uploads/20.jpg, uploads/21.jpg, uploads/22.jpg, uploads/23.jpg", Name = "AIR VAPORMAX FK 'OFF-WHITE'", Price = 780m, Tag = "new" }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAvailable");

                    b.Property<int>("ProductId");

                    b.Property<string>("Size");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSizes");

                    b.HasData(
                        new { Id = 1, IsAvailable = true, ProductId = 1, Size = "6.5" },
                        new { Id = 2, IsAvailable = true, ProductId = 1, Size = "7.0" },
                        new { Id = 3, IsAvailable = false, ProductId = 1, Size = "7.5" },
                        new { Id = 4, IsAvailable = true, ProductId = 1, Size = "8.0" },
                        new { Id = 5, IsAvailable = false, ProductId = 2, Size = "6.5" },
                        new { Id = 6, IsAvailable = true, ProductId = 2, Size = "7.0" },
                        new { Id = 7, IsAvailable = true, ProductId = 2, Size = "7.5" },
                        new { Id = 8, IsAvailable = false, ProductId = 2, Size = "8.0" },
                        new { Id = 9, IsAvailable = false, ProductId = 3, Size = "7.5" },
                        new { Id = 10, IsAvailable = true, ProductId = 3, Size = "8.0" },
                        new { Id = 11, IsAvailable = false, ProductId = 3, Size = "8.5" },
                        new { Id = 12, IsAvailable = false, ProductId = 3, Size = "9.0" },
                        new { Id = 13, IsAvailable = true, ProductId = 4, Size = "7.5" },
                        new { Id = 14, IsAvailable = true, ProductId = 4, Size = "8.0" },
                        new { Id = 15, IsAvailable = false, ProductId = 4, Size = "8.5" },
                        new { Id = 16, IsAvailable = true, ProductId = 4, Size = "9.0" },
                        new { Id = 17, IsAvailable = true, ProductId = 5, Size = "7.0" },
                        new { Id = 18, IsAvailable = true, ProductId = 5, Size = "8.0" },
                        new { Id = 19, IsAvailable = false, ProductId = 5, Size = "9.0" },
                        new { Id = 20, IsAvailable = true, ProductId = 5, Size = "10.0" },
                        new { Id = 21, IsAvailable = false, ProductId = 6, Size = "7.0" },
                        new { Id = 22, IsAvailable = true, ProductId = 6, Size = "8.0" },
                        new { Id = 23, IsAvailable = true, ProductId = 6, Size = "9.0" },
                        new { Id = 24, IsAvailable = true, ProductId = 6, Size = "10.0" }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryInfoId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryInfoId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, DeliveryInfoId = 1, Email = "test@example.com", Name = "test", Password = "123456", PasswordHash = new byte[] { 81, 168, 2, 147, 116, 120, 155, 214, 31, 246, 88, 54, 124, 245, 223, 190, 13, 100, 115, 76, 66, 72, 233, 8, 215, 199, 254, 201, 196, 57, 148, 64, 142, 117, 242, 99, 104, 123, 188, 64, 121, 192, 4, 22, 28, 191, 181, 198, 154, 207, 113, 152, 203, 214, 164, 227, 173, 210, 172, 197, 26, 163, 30, 188 }, PasswordSalt = new byte[] { 74, 189, 38, 3, 94, 134, 167, 41, 28, 235, 212, 237, 218, 33, 38, 206, 208, 94, 176, 125, 166, 124, 245, 75, 73, 168, 75, 135, 21, 200, 94, 174, 186, 217, 135, 114, 126, 232, 187, 8, 150, 144, 72, 164, 196, 101, 235, 81, 148, 218, 34, 146, 176, 247, 62, 65, 116, 112, 253, 125, 161, 154, 116, 109, 144, 173, 65, 119, 225, 225, 90, 82, 120, 40, 12, 138, 60, 26, 119, 250, 157, 184, 135, 209, 249, 83, 179, 189, 129, 48, 214, 99, 254, 106, 125, 26, 222, 3, 240, 44, 191, 26, 21, 156, 102, 223, 81, 115, 35, 198, 67, 141, 16, 25, 174, 54, 107, 68, 143, 72, 70, 33, 12, 112, 224, 100, 217, 92 } }
                    );
                });

            modelBuilder.Entity("eCommerceNET.Entities.Cart", b =>
                {
                    b.HasOne("eCommerceNET.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("eCommerceNET.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eCommerceNET.Entities.CartItem", b =>
                {
                    b.HasOne("eCommerceNET.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.ProductSize", "Size")
                        .WithOne()
                        .HasForeignKey("eCommerceNET.Entities.CartItem", "SizeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("eCommerceNET.Entities.Comment", b =>
                {
                    b.HasOne("eCommerceNET.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("eCommerceNET.Entities.Order", b =>
                {
                    b.HasOne("eCommerceNET.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eCommerceNET.Entities.OrderItem", b =>
                {
                    b.HasOne("eCommerceNET.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eCommerceNET.Entities.ProductSize", "Size")
                        .WithOne()
                        .HasForeignKey("eCommerceNET.Entities.OrderItem", "SizeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("eCommerceNET.Entities.ProductSize", b =>
                {
                    b.HasOne("eCommerceNET.Entities.Product", "Product")
                        .WithMany("Sizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eCommerceNET.Entities.User", b =>
                {
                    b.HasOne("eCommerceNET.Entities.DeliveryInfo", "DeliveryInfo")
                        .WithOne()
                        .HasForeignKey("eCommerceNET.Entities.User", "DeliveryInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
